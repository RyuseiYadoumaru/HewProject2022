～プロジェクト設定～
-------------------------------------------------------------------------------
・文字セット					「マルチバイト文字セットを使用する」
・WindowsSDKバージョン			「10.0.17763.0」
・Windowsプラットフォームセット	「Visual Studio 2017 (v141)」
・複数プロセッサによるコンパイル「はい/MP」
・セキュリティチェック			「有効にします」
・ソリューションプラットフォーム「×86」
・ソリューション構成			「Debug」
-------------------------------------------------------------------------------


～コード規約～
-------------------------------------------------------------------------------
命名規則
・メンバ変数に「 m_ 」をつける
例) float　m_Speed;

・グローバル変数には「 g_ 」をつける
例）float g_Conter;

・ポインタ変数には「 p_ 」ダブルポインタ変数には「 pp_」をつける
例) int* p_atk; float** pp_def;

・変数、関数、クラス名は基本的に英語で大文字と小文字を適切に入れる。
例）class Player{}, float m_Speed; void SetMatrix();

・関数の引数には参照だけの場合は「 in_ 」、
　更新を行い場合は「 out_ 」をつける
例）PlayerMove(float in_Speed, Vector3* out_Position);

・複数ある場合は全て記載する。上から順番に記載するにする。
　ただし、引数名は「 in_ 」もしくは「 out_ 」だけでよい
例）float* mp_Counter; int** gpp_Counter;

-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
データ規則
・Game,EngineはVector3,Vector2を使用
　DirectX,ShaderはXMFLOATを使用

・新たにクラスを作成する場合は「矢動丸」に報告する。
　名前衝突の可能性がある場合にnamespaceを使用する。

・4バイト以上のデータを関数の引数として渡すときは、参照型で渡す
　ただし、関数内でデータを更新する場合を除く。
例) void CheckPlayerStatus(Player& in_Player);
	void UpdatePlayerStatus(Player* out_Player);

・オブジェクトの生成は基本的にスマートポインタを使用する。

・ソリューションファイルのGameName(ゲームのタイトルが入ります)フォルダに
　ゲームで使用するクラスをまとめる。それ以外で仮に作ったものはObjectやSceneにまとめる。

・挙動をテスト的に確認したい場合は「北村」シーンを作成してもらう。
　その際、Game/Sceneフォルダにまとめる

・使用する画像データはassets/Spriteにまとめてある。新たにフォルダを作りたいときは
　「矢動丸」に作成してもらう。

・クラスを作成したときに、必ず「ydmEngine.h」をインクルードする

・usingで使いたい機能を呼び出す。詳細はydmEngineに記載してある。
例) using Create::Character;

・「.h」,「.cpp」ファイルはプロジェクトフォルダの一番上の階層に保存する
　（何も設定せずに保存すれば大丈夫です）

-------------------------------------------------------------------------------

Engine,Shaderの中身は基本的に触らないでください。
使いずらいところがあれば教えてください。忙しくなければ修正します。
バグ報告はGoogleドライブのバグリストを活用してください。
By Yadoumaru